// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/validate_user.proto

// protoc --go_out=$(pwd)/pb --go-grpc_out=$(pwd)/pb --experimental_allow_proto3_optional=true ./proto/validate_user.proto

package grpc_user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mysql_UserExists_FullMethodName = "/proto.mysql/userExists"
)

// MysqlClient is the client API for Mysql service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MysqlClient interface {
	UserExists(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error)
}

type mysqlClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlClient(cc grpc.ClientConnInterface) MysqlClient {
	return &mysqlClient{cc}
}

func (c *mysqlClient) UserExists(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error) {
	out := new(ValidateUserResponse)
	err := c.cc.Invoke(ctx, Mysql_UserExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlServer is the server API for Mysql service.
// All implementations must embed UnimplementedMysqlServer
// for forward compatibility
type MysqlServer interface {
	UserExists(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error)
	mustEmbedUnimplementedMysqlServer()
}

// UnimplementedMysqlServer must be embedded to have forward compatible implementations.
type UnimplementedMysqlServer struct {
}

func (UnimplementedMysqlServer) UserExists(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExists not implemented")
}
func (UnimplementedMysqlServer) mustEmbedUnimplementedMysqlServer() {}

// UnsafeMysqlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MysqlServer will
// result in compilation errors.
type UnsafeMysqlServer interface {
	mustEmbedUnimplementedMysqlServer()
}

func RegisterMysqlServer(s grpc.ServiceRegistrar, srv MysqlServer) {
	s.RegisterService(&Mysql_ServiceDesc, srv)
}

func _Mysql_UserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).UserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mysql_UserExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).UserExists(ctx, req.(*ValidateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mysql_ServiceDesc is the grpc.ServiceDesc for Mysql service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mysql_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mysql",
	HandlerType: (*MysqlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userExists",
			Handler:    _Mysql_UserExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/validate_user.proto",
}
